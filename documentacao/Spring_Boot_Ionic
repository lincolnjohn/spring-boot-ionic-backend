-------------------------------------->>> 01/05/2018

Curso Spring Boot, Hibernate, REST, Ionic - Udemy

Aula(1-3). Introduçao e Como o curso esta organizado.

Aula4. Apresentaçao do estudo de caso: Um sistema de Pedido de Produto. 

Aula5. Material de apoio: Uso do aplicativo Asta para gerar os diagramas de modelagem.

Aula6. Instalaçao das ferramentas:

	* Git - Conta no Github user:lincolnjohn@gmail.com password:marte1964

	* Google Chrome e Postman (Rest Client - utilizar extensao RESTClient no FireFox)

	* JDK - Java Development Kit

	* STS - Spring Tool Suit (Eclipse / Maven / Tomcat / Jackson / JPA)

	* Git instalado local $>git --version git version 2.14.1
	
Aula7. Nivelamento sobre JPA 1:
	* Mapeamento de objeto-relacional: Uma ponte entre o paradigma objeto e o relacional.

	* JPA (java persistence api)é a especificação padrão da plataforma JavaEE (javax.persistence)
	para mapeamento objeto-relacional e persistência de dados.

	* Para trabalhar com JPA é necessário incluir uma implementação da API (hibernate).

	* As principais classes são EntityManager que encapsula uma conexão com a base de dados
	e serve para realizar operações de acesso a dados (incluir, consultar, deletar e alterar)
	em entidades por ela monitoradas em um mesmo contexto de persistência. EntityManagerFactory
	instanciar objetos EntityManager.

Aula8. Nivelamento sobre JPA 2:
	* Incluir os Mapeamentos da classe de dominio. Utilizando anotação "@Entity".
	
	* O JPA somente manipula objetos que estão monitoradas, significa que o objeto acabou de ser incluido
	ou foi buscado do banco de dados.

	* Sempre que você for realizar uma operação que não seja uma consulta, tem que ser envolvida por uma
	transação.

-------------------------------------->>> 02/05/2018 

Aula9. Criando o Projeto com Spring Boot:
	* O Spring Boot já vem com o Tomcat embutido.

	* O arquvio application.properties pode ser usado para mudar a porta padrão do tomcat:
		- server.port=${port:8081}

Aula10. Primeiro commit do Projeto:
	* Utilizar o repositório do github.

	* Abrir a worspace do projeto pelo terminal.

	* Iniciar o git $>git init , o git cria uma pasta chamada .git, onde vai armazenar as informações de mudanças e atualização
	das versões do projeto.

	* A pasta criada pelo git fica oculta para visualizar no terminal $>ls -a -lh, no gerenciador de arquivo Crtl+H.

	* Configurar o git:
		- Na pasta do projeto, via terminal:
			* $>git config --global user.name "Lincoln John".
			* $>git config --global user.email "lincolnjohn@gmail.com"
			* $>git status (visualiza os arquivos que não estão rastreados pelo git (monitorados - Untracked files)).
			* $>git add . (adiciona todos arquivos para área do track, onde podem ser monitorados).
			* $>git commit -m "Projeto criado" (prepara os arquivos para serem versionados no github, -m "mensagem").
			* $>git log (visualiza o log criado com commit).
			* Na página do github selecionar opção "Start project".
			* $>git remote add origin https://github.com/lincolnjohn/cursomc.git (associar o projeto do github com o repositorio local).
			* $>git push -u origin master (envio do repositorio local para o github-repositorio web).
			* Solicita usuario:lincolnjohn e senha:marte1964.
			* No github o projeto já fica salvo, onde se visualiza o commit realizado.

>>> Parou

-------------------------------------->>> 03/05/2018 
Aula11. Testando o Projeto com REST:
	
	* Criar a classe CategoriaResource no pacote \resources vai ser uma classe de Controller.

	* Esta classe vai ser controladora REST (com anotação @RestController) e vai ser mapeada com os 
	End Points (com anotação @RequestMapping).
	
	* Foi feito o versionamento usando git:
		- git status
		- git add .
		- git commit -m "mensagem"
		- git push

Aula 12. Testando a primeira classe de dominio "Categoria":
	
	* Métodos hashCode e equals permitem comprar objetos da classe pelo seu conteúdo.
	
	* Testar a classe "Categoria" utilizando REST cliente "Advanced REST Client - v12.1.2".

	* Para visulizar um log resumido $>git log --oneline.

-------------------------------------->>> 04/05/2018 
Aula 13. Banco de dados H2 e criação automática da base de dados:
	
	* Incluir no projeto as dependências do Spring-Boot JPA, Banco de dados H2(banco que roda em memória) e Spring-Boot devtools.
	
	* Para chamar o console do H2 executar o projeto e informar a url http:\\localhost:8080\h2-console.

	* Para converte os objetos em tabelas, usar as anotação do Jpa @Entity, @Id e @GeneratedValue.

Aula 14. Criando a classe repository e service para Categoria:

	* Atualizar o código da classe service para a versão 2 do Spring Boot(so trabalhar com java8 em diante):
		- Categoria obj = repo.findOne(id); --> Optional<Categoria> obj = repo.findById(id);
			return obj;								return obj.orElse(null);
	
	* Optional<obj>  encapsula objeto e trata no caso de nulo.

	* Modelo arquitetural:

		- Aplicação <--> [Controladores REST (Resources)] <-->	[Camada de Serviço] 					[Camada de domínio]
																[Camada de acesso a dados (Repository)]	[Camada de domínio]
	* Utilizar anotação @Autowired para injetar uma classe.

	* Testando com REST client.

	* Fazer o versionamento no github.

Aula 15. Criando operação de instanciação:
	
	* Atualização (Spring Boot 2):
		- categoriaRepository.save(Arrays.asList(cat1, cat2)); --> categoriaRepository.saveAll(Arrays.asList(cat1, cat2));

	* Implementando CommandLineRunner, para quando aplicação iniciar ela instância o banco de dados.

Aula 16. Criação da classe Produto e associação muitos para muitos:
	
	* Entre as entidades Produto e Categoria existe uma relacionamento Muitos para Muitos (anotaçaõ @ManyToMany).

	* Utilizando anotação @JoinTable identifico qual a tabela que vai conter o relacionamento entre Produto e Categoria.
	Usando os atributos:
		- joinColumns= @JoinColumn(name="produto_id") e inverseJoinColumns=@JoinColumn(name="categoria_id")), aponto
		os campos primários das duas tabelas que fazem parte tabela de relacionamento.

Aula 17. Ajuste no endPoint/categorias{id}:

	* Atualização (Spring Boot 2):
		- public Categoria find(Integer id){
			Categoria obj = repo.findOne(id);
			if (obj == null){.....}
		}  

		-->  

		public Categoria buscar(Integer id) throws ObjectNotFoundException {
		
		Optional<Categoria> obj = repo.findById(id);
		
		return obj.orElseThrow(() -> new ObjectNotFoundException("Objeto não encontrado! Id: "+id+", Tipo: "+Categoria.class.getName()));
	}

	* Utilizar anotação @JsonManagedReference, que permite gerenciar referências ciclicas. Na entidade que se quer 
	visualizar a referência. Na outra entidade usar anotação @JsonBackReference, informando que já foi feita a referência
	na outra entidade. 	

	* Realizar um tratamento de exceção para o REST, no caso de buscar um recurso não encontrado.

	* Cria classes para tratamento de exceção ObjectNotFoundException na camada de services, criar um controlador
	que captura as exceções do HttpServletRequest e uma classe que define um padrão de erro StandardError.

-------------------------------------->>> 05/05/2018 

Endereço do github https://github.com/acenelio/springboot2-ionic-backend
 
Aula 18. Estado e Cidade:
	
	* Utilizar a anotação de mapaeamento @ManyToOne (cidade -> estado) e 
	@OneToMany (relacionamento estado -> cidades).

	* Salvar primeiro os Estados.

	* Realizar o versionamento no github.

Aula 19. Implementar as classes Cliente, Tipo Cliente, telefones e endereço - Parte1:
	
	* Criar um Enum (um tipo enumerado de uma classe) Tipo Cliente.

	* Criar o telefone como uma coleção de string da classe Cliente.

	* Utilizar o tipo de coleção Set<>, que não permite repetição.

-------------------------------------->>> 06/05/2018 

Aula 20. Implementar as classes Cliente, Tipo Cliente, telefones e endereço - Parte2:
	
	* Mapeamento orm paras as classes.

	* A classe Endereco esta associada com Cidade e Cliente, em um relacionamento Muitos para Um.
	O mapeamento do lado Endereco é representado pela anotação @ManyToOne e @JoinColumn(name="cliente_id")
	para Cliente, @ManyToOne @JoinColumn(name="cidade_id") para Cidade. O mapeamento do lado Cliente é
	representado pela anotação @OneToMany(mappedBy="cliente").

	* O mapeamento do telefone (entidade fraca) em relação ao Cliente é feito pela anotação
	@ElementCollection @CollectionTable(name="telefone"). O telefone foi definido como uma coleção de 
	String.

	* Instanciar a classe Cliente primeiro, para povoar o banco de dados. Salvar primeiro a entidade
	que independe de outra.

Aula 21. Endpoint/clientes/{id} disponível:
	
	* Criar a classe ClienteService.

	* Criar a classe ClienteResource.

	* Em relação a serialização ciclica um cliente pode serializar um endereço, mas um endereços não
	pode serializar um cliente.

	* Utilizar anotação @JsonManagedReference na classe Cliente referente ao enderecos:
		- 	@JsonManagedReference
			@OneToMany(mappedBy="cliente")
			private List<Endereco> enderecos = new ArrayList<>();

	* Na classe Endereço uso anotação @JsonBackReference, sinalizando que a classe Endereço não pode
	serializar a classe Cliente. Esse processo ocorre também entre as classes Cidade e Estado, realizar
	o mesmo tratamento.
	



-------------------------------------->>> 13/05/2018 

Aula 30. Criando um novo repositório remoto no github:

	* Clonar o repositório do github https://github.com/lincolnjohn/cursomc.git, na nova pasta do projeto.

	* Apontando o projeto para um novo repositório $>git remote set-url origin https://github.com/lincolnjohn/
	spring-boot-ionic-backend.git

	* Enviando o projeto para o novo repositório $>git push -u origin master

Aula 31. Inserindo uma nova categória com POST:

	* O código adequado no Http para inserir um novo recurso é 201.

	* Extensão do Fire Fox RESTClient, para utilizar chamdas REST.

	* Utilizando RESTClient é necessário incluir Headers Content-Type: application/json;charset=UTF-8.

Aula 32. Atualizando Categoria com PUT:
	
	* Utilizando o método PUT para atualizar a Categoria.









 
