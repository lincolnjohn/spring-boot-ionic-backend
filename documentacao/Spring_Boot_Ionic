----------------------------------->>> 01/05/2018

Curso Spring Boot, Hibernate, REST, Ionic - Udemy

- Introdução (Capítulo 1)

	Aula(1-3). Introduçao e Como o curso esta organizado.

- Implementação do modelo conceitual (Capítulo 2)

	Aula 4. Apresentaçao do estudo de caso: Um sistema de Pedido de Produto. 

	Aula 5. Material de apoio: Uso do aplicativo Asta para gerar os diagramas de modelagem.

	Aula 6. Instalaçao das ferramentas:

		* Criando conta GitHub

		* Google Chrome e Postman (Rest Client - utilizar extensao RESTClient no FireFox)

		* JDK - Java Development Kit

		* STS - Spring Tool Suit (Eclipse / Maven / Tomcat / Jackson / JPA)

		* Git instalado local $>git --version git version 2.14.1
		
	Aula 7. Nivelamento sobre JPA - Parte 1:
		* Mapeamento de objeto-relacional: Uma ponte entre o paradigma objeto e o relacional.

		* JPA (java persistence api)é a especificação padrão da plataforma JavaEE (javax.persistence)
		para mapeamento objeto-relacional e persistência de dados.

		* Para trabalhar com JPA é necessário incluir uma implementação da API (hibernate).

		* As principais classes são EntityManager que encapsula uma conexão com a base de dados
		e serve para realizar operações de acesso a dados (incluir, consultar, deletar e alterar)
		em entidades por ela monitoradas em um mesmo contexto de persistência. EntityManagerFactory
		instanciar objetos EntityManager.

	Aula 8. Nivelamento sobre JPA - Parte 2:
		* Incluir os Mapeamentos da classe de dominio. Utilizando anotação "@Entity".
		
		* O JPA somente manipula objetos que estão monitoradas, significa que o objeto acabou de ser incluido
		ou foi buscado do banco de dados.

		* Sempre que você for realizar uma operação que não seja uma consulta, tem que ser envolvida por uma
		transação.

------------------------------------------>>> 02/05/2018 

	Aula 9. Criando o Projeto com Spring Boot:
		* O Spring Boot já vem com o Tomcat embutido.

		* O arquvio application.properties pode ser usado para mudar a porta padrão do tomcat:
			- server.port=${port:8081}

	Aula 10. Primeiro commit do Projeto:
		* Utilizar o repositório do github.

		* Abrir a worspace do projeto pelo terminal.

		* Iniciar o git $>git init , o git cria uma pasta chamada .git, onde vai armazenar as informações de mudanças e atualização
		das versões do projeto.

		* A pasta criada pelo git fica oculta para visualizar no terminal $>ls -a -lh, no gerenciador de arquivo Crtl+H.

		* Configurar o git:
			- Na pasta do projeto, via terminal:
				* $>git config --global user.name "Lincoln John".
				* $>git config --global user.email "lincolnjohn@gmail.com"
				* $>git status (visualiza os arquivos que não estão rastreados pelo git (monitorados - Untracked files)).
				* $>git add . (adiciona todos arquivos para área do track, onde podem ser monitorados).
				* $>git commit -m "Projeto criado" (prepara os arquivos para serem versionados no github, -m "mensagem").
				* $>git log (visualiza o log criado com commit).
				* Na página do github selecionar opção "Start project".
				* $>git remote add origin https://github.com/lincolnjohn/cursomc.git (associar o projeto do github com o 
				repositorio local).
				* $>git push -u origin master (envio do repositorio local para o github-repositorio web).
				* Solicita usuario:lincolnjohn e senha:marte1964.
				* No github o projeto já fica salvo, onde se visualiza o commit realizado.
				* Para copiar do git para a pasta local utilizar: 
					- git clone https://github.com/lincolnjohn/spring-boot-web-devmedia.git(url do projeto).

	>>> Parou

------------------------------------------>>> 03/05/2018 
	Aula 11. Testando o Projeto com REST:
		
		* Criar a classe CategoriaResource no pacote \resources vai ser uma classe de Controller.

		* Esta classe vai ser controladora REST (com anotação @RestController) e vai ser mapeada com os 
		End Points (com anotação @RequestMapping).
		
		* Foi feito o versionamento usando git:
			- git status
			- git add .
			- git commit -m "mensagem"
			- git push

	Aula 12. Testando a primeira classe de dominio "Categoria":
		
		* Métodos hashCode e equals permitem comprar objetos da classe pelo seu conteúdo.
		
		* Testar a classe "Categoria" utilizando REST cliente "Advanced REST Client - v12.1.2".

		* Para visulizar um log resumido $>git log --oneline.

------------------------------------------>>> 04/05/2018 

	Aula 13. Banco de dados H2 e criação automática da base de dados:
		
		* Incluir no projeto as dependências do Spring-Boot JPA, Banco de dados H2(banco que roda em memória) e Spring-Boot
		devtools.
		
		* Para chamar o console do H2 executar o projeto e informar a url http:\\localhost:8080\h2-console.

		* Para converte os objetos em tabelas, usar as anotação do Jpa @Entity, @Id e @GeneratedValue.

	Aula 14. Criando a classe repository e service para Categoria:

		* Atualizar o código da classe service para a versão 2 do Spring Boot(so trabalhar com java8 em diante):
			- Categoria obj = repo.findOne(id); --> Optional<Categoria> obj = repo.findById(id);
				return obj;								return obj.orElse(null);
		
		* Optional<obj>  encapsula objeto e trata no caso de nulo.

		* Modelo arquitetural:

			- Aplicação <--> [Controladores REST (Resources)] <-->	[Camada de Serviço] 					[Camada de domínio]
																	[Camada de acesso a dados (Repository)]	[Camada de domínio]
		* Utilizar anotação @Autowired para injetar uma classe.

		* Testando com REST client.

		* Fazer o versionamento no github.

	Aula 15. Criando operação de instanciação:
		
		* Atualização (Spring Boot 2):
			- categoriaRepository.save(Arrays.asList(cat1, cat2)); --> categoriaRepository.saveAll(Arrays.asList(cat1, cat2));

		* Implementando CommandLineRunner, para quando aplicação iniciar ela instância o banco de dados.

	Aula 16. Criação da classe Produto e associação muitos para muitos:
		
		* Entre as entidades Produto e Categoria existe uma relacionamento Muitos para Muitos (anotaçaõ @ManyToMany).

		* Utilizando anotação @JoinTable identifico qual a tabela que vai conter o relacionamento entre Produto e Categoria.
		Usando os atributos:
			- joinColumns= @JoinColumn(name="produto_id") e inverseJoinColumns=@JoinColumn(name="categoria_id")), aponto
			os campos primários das duas tabelas que fazem parte tabela de relacionamento.

	Aula 17. Ajuste no endPoint/categorias{id}:

		* Atualização (Spring Boot 2):
			- public Categoria find(Integer id){
				Categoria obj = repo.findOne(id);
				if (obj == null){.....}
			}  

			-->  

			public Categoria buscar(Integer id) throws ObjectNotFoundException {
			
			Optional<Categoria> obj = repo.findById(id);
			
			return obj.orElseThrow(() -> new ObjectNotFoundException("Objeto não encontrado! Id: "+id+", Tipo: 
			"+Categoria.class.getName()));
		}

		* Utilizar anotação @JsonManagedReference, que permite gerenciar referências ciclicas. Na entidade que se quer 
		visualizar a referência. Na outra entidade usar anotação @JsonBackReference, informando que já foi feita a referência
		na outra entidade. 	

		* Realizar um tratamento de exceção para o REST, no caso de buscar um recurso não encontrado.

		* Cria classes para tratamento de exceção ObjectNotFoundException na camada de services, criar um controlador
		que captura as exceções do HttpServletRequest e uma classe que define um padrão de erro StandardError.

	 
	Aula 18. Estado e Cidade:
		
		* Utilizar a anotação de mapaeamento @ManyToOne (cidade -> estado) e 
		@OneToMany (relacionamento estado -> cidades).

		* Salvar primeiro os Estados.

		* Realizar o versionamento no github.

	Aula 19. Implementar as classes Cliente, Tipo Cliente, telefones e endereço - Parte1:
		
		* Criar um Enum (um tipo enumerado de uma classe) Tipo Cliente.

		* Criar o telefone como uma coleção de string da classe Cliente.

		* Utilizar o tipo de coleção Set<>, que não permite repetição.

------------------------------------------->>> 06/05/2018 

	Aula 20. Implementar as classes Cliente, Tipo Cliente, telefones e endereço - Parte2:
		
		* Mapeamento orm paras as classes.

		* A classe Endereco esta associada com Cidade e Cliente, em um relacionamento Muitos para Um.
		O mapeamento do lado Endereco é representado pela anotação @ManyToOne e @JoinColumn(name="cliente_id")
		para Cliente, @ManyToOne @JoinColumn(name="cidade_id") para Cidade. O mapeamento do lado Cliente é
		representado pela anotação @OneToMany(mappedBy="cliente").

		* O mapeamento do telefone (entidade fraca) em relação ao Cliente é feito pela anotação
		@ElementCollection @CollectionTable(name="telefone"). O telefone foi definido como uma coleção de 
		String.

		* Instanciar a classe Cliente primeiro, para povoar o banco de dados. Salvar primeiro a entidade
		que independe de outra.

	Aula 21. Endpoint/clientes/{id} disponível:
		
		* Criar a classe ClienteService.

		* Criar a classe ClienteResource.

		* Em relação a serialização ciclica um cliente pode serializar um endereço, mas um endereços não
		pode serializar um cliente.

		* Utilizar anotação @JsonManagedReference na classe Cliente referente ao enderecos:
			- 	@JsonManagedReference
				@OneToMany(mappedBy="cliente")
				private List<Endereco> enderecos = new ArrayList<>();

		* Na classe Endereço uso anotação @JsonBackReference, sinalizando que a classe Endereço não pode
		serializar a classe Cliente. Esse processo ocorre também entre as classes Cidade e Estado, realizar
		o mesmo tratamento.

------------------------------------------->>> 09/05/2018 

	Aula 22. Pedio,EstadoPagamento e Pagamento - Parte1:

		* Coreção ->  SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm");

		* A classe Pedido é uni-direcionada com a classe Endereco, então endereco não precisa conhecer o pedido.

		* A classe Pedido é bi-direcionada com a classe Cliente, então ambos precisam se conhecer.

		* Lembrando coleção não se coloca no construtor.

	Aula 23. Pedio,EstadoPagamento e Pagamento - Parte2:

		* Mapeamento Objeto relacional.

		* O mapeamento Pagamento com Pedido vai ser representado pela notação @OneToOne(um para um bi-direcional), para garantir 
		que o id do Pagamento seja o mesmo da coluna pedido_id utilizamos anotação @MapsId. O id do pagamento não vai utilizar 
		anotação @GeneratedValue.

		* O mapeamento do Pedido com Pagamento vai ser utilizado anotação @OneToOne(um para um bi-direcional) e o atributo 
		cascade=CascadeType.ALL, para garantir que uma transação ao ser realizada no pedido se reflita no pagamento. 

	Aula 24. Pedio,EstadoPagamento e Pagamento - Parte3:

		* Mapeamento da herança entre Pagamento,PagamentoComBoleto e PagamentoComCartao.

		* Utiliza-se duas abordagens uma tabela única com as duas sub-classes (mais performace) ou uma tabela para cada sub-classe.
		Caso as sub-classes tenham muitos atributos o melhor é uma tabela para cada, se houver poucos atributos a solução é uma
		tabela única.

		* Anotação utilizada para cada sub-classe com uma tabela é @Inheritance(strategy=InheritanceType.JOINED).

		* Identificar a super-classe Pagamento como abstrata, onde so posso instanciar as sub-classses.
		
------------------------------------------>>> 10/05/2018 
	Aula 25. Item Pedio e ItemPrdidoPK - Parte1:
		
		* Uma classe de associação não tem um identificador próprio, quem identifica esta é as classes que ela é associada.

		* Uma das maneiras de mapear a classe associada (java com JPA) é criar uma chave composta a partir das classes que geram
		associação.

		* Criar uma classe auxiliar que contém a chave composta.

		* Utilizar anotação @Embeddable, para identificar com subtipo.

	Aula 26. Item Pedio e ItemPrdidoPK - Parte2:
		* Para a classe Pedido conheça a classe ItemPedido, tenho que definir dentra da classe Pedido uma coleção de ItemPedido.
		Este processo se repete com a classe Produto.

		* Utilizar anotação @EmbeddedId para identificar um id embutido em uma classe auxiliar.

	Aula 27. Endpoint/pedidos/{id} disponibilizado:
		
		* Na classe ItemPedido que tem uma chave composta vou utilizar anotação @JsonIgnore, identificando que a classe não
		vai ser serializada.

	Aula 28. Atualização utilizando somente @Jsonignore:

		* Utilizar somente @Jsonignore no lugar @JsonBackReference, apagar @JsonManagerReference.

- Operaçẽos de CRUD e Casos de Uso (Capítulo 3)

	Aula 29. Material de Apoio:

		* Vamos ver muita coisa bacana neste capítulo, desde os controladores REST, uso de DTO's, validações personalizadas, 
		tratamento de exceções e consultas à base de dados. Sempre de olho nas boas práticas de Engenharia de Software.

		* A partir da próxima aula vamos definir o repositório Github oficinal do projeto do curso na versão 1.5.x do Spring Boot:
		https://github.com/acenelio/spring-boot-ionic-backend

		* Além disso, o projeto foi TOTALMENTE REFEITO para a nova versão 2.x.x do Spring Boot, o qual também está disponível no
		Github:	https://github.com/acenelio/springboot2-ionic-backend

-------------------------------------->>> 13/05/2018 

Aula 30. Criando um novo repositório remoto no github:

	* Clonar o repositório do github https://github.com/lincolnjohn/cursomc.git, na nova pasta do projeto.

	* Apontando o projeto para um novo repositório $>git remote set-url origin https://github.com/lincolnjohn/
	spring-boot-ionic-backend.git

	* Enviando o projeto para o novo repositório $>git push -u origin master

Aula 31. Inserindo uma nova categória com POST:

	* O código adequado no Http para inserir um novo recurso é 201.

	* Extensão do Fire Fox RESTClient, para utilizar chamdas REST.

	* Utilizando RESTClient é necessário incluir Headers Content-Type: application/json;charset=UTF-8.

Aula 32. Atualizando Categoria com PUT:
	
	* Utilizando o método PUT para atualizar a Categoria.

-------------------------------------->>> 14/05/2018  

Aula 33. Deletando uma Categoria com DELETE:

	* Atualização para Srping Boot 2.x, na classe CategoriaService usar "repo.deleteById(id)" .

	* Se tentar deletar Categoria que tenha Produto relacionado, no exemplo utilizado vou abortar operação
	de deletar. Ao tentar deletar o spring Data lança uma exeção de "Integridade Violada".

	* Capturar a exeção para lançar uma controlada, pela camada de Serviço. Uma exeção adequada a uma solicitação 
	HttpServletRequest.

-------------------------------------->>> 17/05/2018  

Aula 34. Listando todas as categorias com DTO:

	* Criar um End-point que retorna todas as categorias.

	* Para listar apenas as Categorias sem mostrar os produtos utilizar o padrão DTO (Data Transfer Object), objeto que tem
	apenas os dados que eu quero selecionar.

	* Para converter uma lista de Categoria em uma lista de CategoriaDTO, utilizar o método do Java 8 stream.map() em conjunto
	com uma arrow function ( -> ).

Atualizar PageRequest pageRequest = PageRequest.of().

Aula 35. Paginação com parâmetros opcionais na requisição:

	* A paginação é necessária para controlar a quantidade de registros, que ficam disponíveis para o usuário do sistema. Com
	objetivo de não deteriorar a performace deste.

	* Usar a classe Page() do Spring boot, encapsula a paginação.

	* Passar parâmetros pela Url http://localhost:8080/categorias/page?linesPerPage=3&page=1.
	
-------------------------------------->>> 21/05/2018  

Aula 36. Validação sintática com Bean Validation:

Atualizar utilizar a classe import javax.validation.contraints.NotEmpty, no lugar da classe do Hibernate.

	* Validação sem acesso a dados:

		- Sintáticas: Campo nã pode ser vazio, Valor numérico mínimo ou máximo, Comprimento de String mínimo ou máximo etc.

		- Data futura ou passada.

	* Validação com acesso a dados:

		- Campo não pode ser repetido.

		- Cada usuário pode cadastrar no máximo 3 valore.

	* O framework Spring ja faz a validação na camada de controladores REST.

	* Se for necessário uma validação customizada vamos fazer na camada de Serviço.

	* Vamos usar os DTOs para validação básica. Usando Bean validation javax.validation e Hibernate validator org.hibernate.validator.

Aula 37. Personalizando o retorno da validação:

	* Criar classes de validação para capturar a execessão e personalizar o retorno da validação.	

-------------------------------------->>> 01/06/2018  

Aula 38. PUT, DELETE e GET para Cliente:

	* Atualizações para Spring Boot 2.0:
		- import javax.validation.constraints.Email e import javax.validation.constraints.NotEmpty.
	* Instanciar um Cliente apartir de um ClienteDTO.
	* Estabelecer uma regra no sistema que não poder deletar cliente que tenha pedido.

Aula 39. Correções update Categoria Service e construtor de Pagamento.	
		
-------------------------------------->>> 05/06/2018 

Aula 40. Inserindo um novo Cliente com POST:
	
	* Atualização para o Spring Boot 2.0:
		- Usar @Transactional no método insert:
			@Transactional
			public Cliente insert(Cliente obj) {
		
		- Não é necessário usar cidadeRepository no método fromDTO:
			Cidade cid = new Cidade(objDto.getCidadeId(), null, null);

	* O cliente tem que ter pelo menos um telefone e endereço de uma cidade.

	* Criar um DTO especifico para está situação.

	* Exemplo de cliente via Postman:
	{
		"nome":"Mulher Maravilha",
		"email":"mulhar@yahoo.br",
		"cpfOuCnpj":"2323232323",
		"tipo":1,
		"telefone1":"9999444",
		"telefone2":"66778888",
		"logradouro":"rua das amazonas",
		"numero":"2000",
		"complemento":"prox.vulcao",
		"cep":"55667777",
		"cidadeId":2
	}

Aula 41. Ajustando e testando a deleção de Cliente:

	* Adotar como regra de negócio: Eu não posso deletar um cliente que tenha um pedido.

	* Excluir o cliente e os endereços. 

	* O JPA permite fazer uma operação que quando se tem um relacionamento um para muitos, de maneira ao realizar
	uma operação na entidade se reflita em outra que está relacionada. Utilizando o parâmetro "cascade=CascadeType.ALL".

Aula 42. Validação customizada de CPF ou CNPJ;

	* Criar uma anotação customizada da classe.

	* As classes de validação fazem parte da camada de serviços.

Aula 43. Validação customizada de email não repetido na inserção do Cliente:

	* O JPA permite identificar um campo que deve ter um valor não repetido no banco de dados. Usando anotação 
	"@Column(unique=true)" gerando uma excessão violação de integridade.

	* Anotação "@Transactional(readOnly=true)", identifica uma transação somente de leitura.

-------------------------------------->>> 29/06/2018 

Aula 44. Validação customizada de email não repetido na atualização do Cliente:

	* Utilizar uma estrutura de dados Map, uma coleção de chave e valor.

	* Implementar a regra que permite se o mesmo email caso seja uma atualização do mesmo Cliente.


Aula 45. Apresentando o Caso de uso:

	* O caso de uso é uma descrição funcional da interação do usuário com o sistema. 

	* O usuário é chamado de ator, porque está desempenhando um papel no sistema.

	* O caso descreve a troca de informação entre o cliente e o sistema.


Aula 46. Nivelamento: SQL e JPQL:

	* JPQL é a lunguagem de consuta da JPA.

	* A JPQL é similar a SQL porém as consultas são expressas em nível de objetos.

	* Comparação: 	SQL -> select * from cliente (retorna um resultset com os dados da tabela cliente)
					JPQL -> select obj from Cliente obj (retorna um List<Cliente>)

	* 

parou aula 47

-------------------------------------->>> 11/07/2018 

Aula 47. Busca de pedidos por nome e categorias - Parte 1:

	* Atualização para o Spring 2 usar "findAllById(ids)".

	* O método "search()" na classe ProdutoService é uma busca paginada.

	* Na documentação do Spring JPA, encontra-se a relação de métodos que podem ser utilizados para criar consultas JPQL.

	* Com anotação @Qeury você cria a consulta JPQL(se baseia no nome da classe) dentro da própria interface.

Aula 48. Busca de pedidos por nome e categorias - Parte 2:

	* O processo de encodeURIComponent("TV LED") => "TV%LED".

	* Posso substituir a sentença JPQL:
		"SELECT DISTINCT obj FROM Produto obj INNER JOIN obj.categorias cat WHERE obj.nome LIKE %:nome% AND cat IN :categorias"
		
		- Por um método usando nomes utilizados pelo JPQL:
			findDistinctByNomeContainingAndCategoriasIn	

Aula 49. Subtotal e total do Pedido:
	
	* Incluir operações na classe de dominio.

Aula 50. Inserindo Pedido:

	* Atualização para o Spring Boot 2:

		- Usar anotação "@Transactional" no metodo de insert() na classe PedidoService.

		- Na classe PedidoServie, usar ProdutoService ao invés de ProdutoRepository, quando na busca pelo preço do Produto.

	* No Pagamento de um Pedido é necessário implementar a classe Pagamento por ela ser abstrata, implementando um dos tipos de pagamento.

	* No projeto é utilizado a biblioteca Jackson responsável em serializar e deserializar objetos Json.

	* Criação de uma classe de configuração, que vai ser instanciada na inicialização do sistema.

	* Informação sobre configuração do Jackson:
		// https://stackoverflow.com/questions/41452598/overcome-can-not-construct-instance-ofinterfaceclass-without-hinting-the-pare

	* Para inserir um Pedido não vou utilizar um PedidoDTO, pois teria que criar associações entre vários DTO's.

Aula 51. Material de Apoio:

Aula 52. Instalando MySql:

	* Sugestão para utilizar XAMP. O meu PC já tem o MySql instalado.

Aula 53. Criando o profile de teste:

	* O profile serve para definir propriedades que serão executadas pelo sistema de acordo com ambiente teste, desenvolvimento e produçaõ.

-------------------------------------->>> 12/07/2018 

Aula 54. Criando o profile de desenvolvimento:

	* Utilizar o MySql e criar a base de dados curso_spring.

	* Não utilizei o LAMP, que instala o Apache e MySql.

Aula 55. Instalando e preparando o Heroku:

	* Heroku plataforma utiliza para publicar o Back-end na nuvem.

	* Já possuo uma conta no Heroku:
		
		- https://dashboard.heroku.com/login 		
				
		- login:lincolnjohn@gmail.com senha:saturno1964

		- Criar um app: app-spring-ionic-lj onde vamos colocar o Back-end.

		- Seguir o instruções do material de apoio.

	* Instalar o cliente do Heroku:

		- https://devcenter.heroku.com/articles/heroku-cli#download-and-install.

		- sudo snap install heroku --classic.
	
		- logar no Heroku $>heroku login.

Aula 56. Dump da base de dados para o Heroku:

	* $> mysqldump -u root -p curso_spring > arquivo.sql.

	* Executar o script gerado no arquivo.sql no heroku.

	* Associar o repositório local com o Heroku:

		- Dentro da pasta do projeto digitar heroku git:remote -a app-spring-ionic-lj.

		- O comando git remote -v mostra os locais remotos que o projeto está associado:
			heroku	https://git.heroku.com/app-spring-ionic-lj.git (fetch)
			heroku	https://git.heroku.com/app-spring-ionic-lj.git (push)
			origin	https://github.com/lincolnjohn/spring-boot-ionic-backend.git (fetch)
			origin	https://github.com/lincolnjohn/spring-boot-ionic-backend.git (push)

	* Obter a URL do banco de dados no heroku:

		- heroku config | grep CLEARDB_DATABASE_URL:

		- mysql://b2932e70c17883(usuario):c1f75384(senha)@us-cdbr-iron-east-04.cleardb.net(host=)/heroku_b91804a51bf0420(host)?reconnect=true
		
	  	- $> mysql --host=us-cdbr-iron-east-04.cleardb.net --user=b2932e70c17883 --password=c1f75384 --reconnect heroku_b91804a51bf0420 < arquivo.sql	

Aula 57. Configuração e envio do projeto para produção:

	* Criar o profile de produção do heroku.

	* Criar o arquivo Procfile que faz a comunicação entre o aplicativo e o heroku.

	* Fazer o commit para o github e heroku.

	* Url gerada pelo heroku https://app-spring-ionic-lj.herokuapp.com/pedidos/1

-------------------------------------->>> 13/07/2018 
	
Aula 58. Material de apoio:

Aula 59. Implementando toString de Pedido:

	* Atualização:
		
		- Na classe PedidoService, usar ClienteService ao invés de ClienteRepository.

	* Na geração do toString na opção "Code Style" selecionar o "StringBuilder/StringBuffer" que tem um desempenho otimizado.

Aula 60. MockEmailService com Logger (Padrões Strategy e Template Method):

	* Usar plimorfismo com o padrão Strategy para criar uma interface EmailService.

	* A classe MockEmailService simula o envio de email utilizando a classe org.slf4j.Logger.


-------------------------------------->>> 18/07/2018 

Aula 61. Implementando SmtpEmailService com servidor Google:

	* Atualização:

		- As configuração do material de apoio devem ser colocadas no profile dev e prod, se quiser
		no profile de test deve colocar estas configuração neste.

	- Para testarmos o email colocar o meu email do google no DBService quando inserir o cliente que fez 
	o pedido.
	- Antes de fazer o commit retirar os dados do email, para não ficar publico. 

Aula 62. Atualização - outro link para liberar acesso ao Gmail:
	
	* Atualização:

		- Depois de um tempo atualização do gmail que permite receber email via aplicativo, perde a
		validade e novamente bloqueia.

		- Pode ser usado um dos links a seguir:
			https://www.google.com/settings/security/lesssecureapps
			https://accounts.google.com/b/0/DisplayUnlockCaptcha (executar pelo heroku)

Aula 63. Email Html:

	* O conteúdo desta aula é uma atualização feita após o curso encerrado, sendo necessário criar um
	branch no git-hub (ramificação do original), evitando alterar a sequência já existente:

		- Para criar o branch no git: git checkout -b 'email-html'.

	* Utilizar a biblioteca de template do Spring Thymeleaf.

	* Implementar o email para enviar no formato Html.


-------------------------------------->>> 30/07/2018 

Aula 64. Autenticação e Autorização com Tokens JWT:

	* Material de Apoio.

Aula 65. Configuração do Spring Security:

	* JWT Json web tokens.

	* Incluir as dependências do Spring Security e JWT no pom.xml.

	* Somente incluindo as depedências do Spring Security já bloqueia o acesso aos end points.

	* Criar uma classe responsável pelas configurações do Spring Security.

	* Identificar na classe de configuração quais end points estão liberados para acesso.

	* Implementar métodos que permitem ou bloqueiem o acesso.

	* Desabilita a configuração para um tipo de ataque csrf, porque o sistema não vai manter o estado da sessão(stateless).

	* Incluir uma configuração para acesso ao console do h2.

	* Incluir end points somente para leitura (get). 

-------------------------------------->>> 01/08/2018 

Aula 66. Adicionando senha a Cliente:

	* Aplicar algoritimo de encode para encriptar a senha, utilizar BCryptPasswordEncoder componente do framework 
	Spring Security.

Aula 67. Salvando perfis de usuário na base de dados:

	* O Spring Security por padrão adota nos perfis "ROLE_+(setor do usuário)".	

	* Incluir outro cliente para testar rest com o perfil.
	
[----------------------------------------------------------------------------------------------- (06/08/2018)]

Aula 68. Implementação autenticação e geração do token JWT (parte1):

	* Atualização:

		- Na classe JWTAuthenticationfilter, acrescentar uma implementação de AuthenticationFailureHandler e injetar
		em JWTAuthenticationfilter:

		    public JWTAuthenticationFilter(AuthenticationManager authenticationManager, JWTUtil jwtUtil) {
		    	setAuthenticationFailureHandler(new JWTAuthenticationFailureHandler());
		        this.authenticationManager = authenticationManager;
		        this.jwtUtil = jwtUtil;
		    }

			private class JWTAuthenticationFailureHandler implements AuthenticationFailureHandler {
		 
		        @Override
		        public void onAuthenticationFailure(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception)
		                throws IOException, ServletException {
		            response.setStatus(401);
		            response.setContentType("application/json"); 
		            response.getWriter().append(json());
		        }
		        
		        private String json() {
		            long date = new Date().getTime();
		            return "{\"timestamp\": " + date + ", "
		                + "\"status\": 401, "
		                + "\"error\": \"Não autorizado\", "
		                + "\"message\": \"Email ou senha inválidos\", "
		                + "\"path\": \"/login\"}";
		        }
		    }

	* Autenticação significa quem a pessoa é. O sistema verifica se seu usário e senha estão corretos.

	* Autorização verifica se o usuário pode acessar determinado recurso.

	* Para gerar um token é chamado um método da biblioteca JWT.

[----------------------------------------------------------------------------------------------- (08/08/2018)]

Aula 69. Implementação autenticação e geração do token JWT (parte2):

	* Um filtro de autenticação intercepta a requisição e executa um procedimento.
	* Receber login e senha via Post (requisição http).
	* Acrescentar o token da resposta como cabeçalho da requisição.

[----------------------------------------------------------------------------------------------- (09/08/2018)]

Aula 70. Implementando autorização:

	* Autenticação verifica que o usuário é realmente ele, na Autorização identifica que partes do sistema você tem acesso.

	* O processo de Autenticação gera um token, que depois deve ser repasado via header como uma chave "Authorization" e o valor
	do token, dentro do método Http para acessa o endpoint.

	* No sistema criar um filtro de autorização.

	* O tipo Claims é utilizado quando temos um token revindicando algo.

Aula 71. Autorizando endpoints para perfis específicos:

	* Incluir notação para autorizar pertis específicos.

	* De acordo com a regra de negócio, inserir anotação @PreAuthorize para um determinado perfil. No exemplo vamos incluir
	no endpoint "POST","PUT" e "DELETE" nos métodos inserir, atualizar e deletar Categoria.	

|----------------------------------------------------------------------------------------------> (18/09/2018)

Aula 72. Restrição de conteúdo - o cliente so recupera ele mesmo:

	* Criar uma classe UserService que retorna o usuário logado.


Aula 73. Restrição de conteúdo - o cliente só recupera seus pedidos:

	* Atualização para o SpringBoot 2.0 : Na classe PedidoService no método findPage() na instânciação do PageRequest pageRequest = 
	PageRequest.of(....). Na hora de buscar o cliente Cliente cliente = clienteService.find(.....) .

	* Reaproveitar de CategoriaResource o método que faz uma busca paginada.

Aula 74. Refresh token:

	* Um EndPoint com Refresh token renova o token e registra um novo token.
	

|----------------------------------------------------------------------------------------------> [27/12/2018]

Aula 75. Esqueci a senha:

	* O método "sendNewPassword" precisa verificar se o email existe.

	* Criar um método para gerar números, letras maiusculas e minusculas de forma aleatório para compor a nova senha
	do usuário.

	* Criar EmailDTO para informações sobre o email que o cliente informar.
